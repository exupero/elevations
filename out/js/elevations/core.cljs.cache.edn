;; Analyzed by ClojureScript 0.0-3195
{:use-macros {match cljs.core.match, go cljs.core.async.macros, spy elevations.macros}, :excludes #{}, :name elevations.core, :imports nil, :requires {vdom.elm vdom.elm, xml goog.dom.xml, goog.dom.xml goog.dom.xml, cljs.core.match cljs.core.match, cljs.core.async cljs.core.async, async cljs.core.async}, :uses {timeout cljs.core.async, chan cljs.core.async, foldp vdom.elm, render! vdom.elm, event vdom.elm, put! cljs.core.async}, :defs {step {:protocol-inline nil, :meta {:arglists (quote ([model action])), :end-column 11, :end-line 84, :column 7, :line 84, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/step, :variadic false, :file "src/elevations/core.cljs", :end-column 11, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :test true}, ui {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 9, :end-line 74, :column 7, :line 74, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/ui, :variadic false, :file "src/elevations/core.cljs", :end-column 9, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, ui-tracks {:protocol-inline nil, :meta {:arglists (quote ([{:keys [tracks selected]} actions])), :end-column 16, :end-line 68, :column 7, :line 68, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/ui-tracks, :variadic false, :file "src/elevations/core.cljs", :end-column 16, :method-params ([p__13380 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [tracks selected]} actions])), :test true}, init-map {:protocol-inline nil, :meta {:arglists (quote ([id])), :end-column 15, :end-line 55, :column 7, :line 55, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/init-map, :variadic false, :file "src/elevations/core.cljs", :end-column 15, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, gpx->tracks {:protocol-inline nil, :meta {:arglists (quote ([doc])), :end-column 18, :end-line 37, :column 7, :line 37, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/gpx->tracks, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :test true}, format-date {:meta {:end-column 17, :end-line 35, :column 6, :line 35, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :file "src/elevations/core.cljs", :line 35, :column 1, :end-line 35, :end-column 17, :test true, :name elevations.core/format-date}, drop-enable {:protocol-inline nil, :meta {:arglists (quote ([el f])), :end-column 18, :end-line 20, :column 7, :line 20, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drop-enable, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([el f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el f])), :test true}, drop-disable {:protocol-inline nil, :meta {:arglists (quote ([el])), :end-column 19, :end-line 11, :column 7, :line 11, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drop-disable, :variadic false, :file "src/elevations/core.cljs", :end-column 19, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el])), :test true}}, :require-macros {cljs.core.match cljs.core.match, elevations.macros elevations.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:lon :lat :elevation :time :id :started :points :selected :tracks :ul :li :className :onclick :select :div :section :main :else :load-tracks :no-op :recur], :seen #{:started :elevation :selected :ul :else :li :section :time :tracks :onclick :recur :points :className :no-op :div :load-tracks :id :lon :lat :main :select}}, :doc nil}