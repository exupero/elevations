;; Analyzed by ClojureScript 0.0-3195
{:use-macros {match cljs.core.match, go cljs.core.async.macros, spy elevations.macros}, :excludes #{}, :name elevations.core, :imports nil, :requires {xml goog.dom.xml, view elevations.view, elevations.view elevations.view, elevations.util elevations.util, async cljs.core.async, cljs.core.async cljs.core.async, vdom.elm vdom.elm, util elevations.util, cljs.core.match cljs.core.match, goog.dom.xml goog.dom.xml}, :uses {timeout cljs.core.async, chan cljs.core.async, tap cljs.core.async, foldp vdom.elm, render! vdom.elm, event vdom.elm, mult cljs.core.async, put! cljs.core.async}, :defs {step {:protocol-inline nil, :meta {:arglists (quote ([model action])), :end-column 11, :end-line 57, :column 7, :line 57, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/step, :variadic false, :file "src/elevations/core.cljs", :end-column 11, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :test true}, init-map {:protocol-inline nil, :meta {:arglists (quote ([id actions])), :end-column 15, :end-line 45, :column 7, :line 45, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/init-map, :variadic false, :file "src/elevations/core.cljs", :end-column 15, :method-params ([id actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id actions])), :test true}, drop-enable {:protocol-inline nil, :meta {:arglists (quote ([el actions])), :end-column 18, :end-line 35, :column 7, :line 35, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drop-enable, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([el actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el actions])), :test true}, drag-enable {:protocol-inline nil, :meta {:arglists (quote ([el actions])), :end-column 18, :end-line 22, :column 7, :line 22, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drag-enable, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([el actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el actions])), :test true}, drag-disable {:protocol-inline nil, :meta {:arglists (quote ([el])), :end-column 19, :end-line 13, :column 7, :line 13, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drag-disable, :variadic false, :file "src/elevations/core.cljs", :end-column 19, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el])), :test true}}, :require-macros {cljs.core.match cljs.core.match, elevations.macros elevations.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:drop-on :drop-off :load :hide-path :show-path :else :select :points :map-pane :selected :geojson :show? :scrub :tracks :set-map-pane :droppable? :no-op :recur], :seen #{:load :selected :else :set-map-pane :drop-on :geojson :tracks :hide-path :recur :points :scrub :show? :no-op :map-pane :show-path :drop-off :select :droppable?}}, :doc nil}