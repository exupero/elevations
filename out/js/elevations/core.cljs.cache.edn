;; Analyzed by ClojureScript 0.0-3195
{:use-macros {match cljs.core.match, go cljs.core.async.macros, spy elevations.macros}, :excludes #{}, :name elevations.core, :imports nil, :requires {vdom.elm vdom.elm, xml goog.dom.xml, goog.dom.xml goog.dom.xml, cljs.core.match cljs.core.match, cljs.core.async cljs.core.async, async cljs.core.async}, :uses {timeout cljs.core.async, chan cljs.core.async, tap cljs.core.async, foldp vdom.elm, render! vdom.elm, event vdom.elm, mult cljs.core.async, put! cljs.core.async}, :defs {extrema {:protocol-inline nil, :meta {:arglists (quote ([f xs])), :end-column 14, :end-line 101, :column 7, :line 101, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/extrema, :variadic false, :file "src/elevations/core.cljs", :end-column 14, :method-params ([f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f xs])), :test true}, step {:protocol-inline nil, :meta {:arglists (quote ([model action])), :end-column 11, :end-line 237, :column 7, :line 237, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/step, :variadic false, :file "src/elevations/core.cljs", :end-column 11, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :test true}, classes {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(cs)], :arglists [[& cs]], :arglists-meta (nil)}, :arglists (quote ([& cs])), :end-column 14, :end-line 93, :column 7, :line 93, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/classes, :variadic true, :file "src/elevations/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(cs)], :arglists [[& cs]], :arglists-meta (nil)}, :method-params [(cs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 0, :fn-var true, :arglists [[& cs]], :test true}, format-duration {:protocol-inline nil, :meta {:arglists (quote ([t])), :end-column 22, :end-line 45, :column 7, :line 45, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/format-duration, :variadic false, :file "src/elevations/core.cljs", :end-column 22, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :test true}, zoom {:protocol-inline nil, :meta {:arglists (quote ([map-pane feature])), :end-column 11, :end-line 96, :column 7, :line 96, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/zoom, :variadic false, :file "src/elevations/core.cljs", :end-column 11, :method-params ([map-pane feature]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-pane feature])), :test true}, drop-enable {:protocol-inline nil, :meta {:arglists (quote ([el actions])), :end-column 18, :end-line 33, :column 7, :line 33, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drop-enable, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([el actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el actions])), :test true}, drag-enable {:protocol-inline nil, :meta {:arglists (quote ([el actions])), :end-column 18, :end-line 20, :column 7, :line 20, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drag-enable, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([el actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el actions])), :test true}, drag-disable {:protocol-inline nil, :meta {:arglists (quote ([el])), :end-column 19, :end-line 11, :column 7, :line 11, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/drag-disable, :variadic false, :file "src/elevations/core.cljs", :end-column 19, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el])), :test true}, init-map {:protocol-inline nil, :meta {:arglists (quote ([id actions])), :end-column 15, :end-line 81, :column 7, :line 81, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/init-map, :variadic false, :file "src/elevations/core.cljs", :end-column 15, :method-params ([id actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id actions])), :test true}, coords->geojson {:protocol-inline nil, :meta {:arglists (quote ([cs])), :end-column 22, :end-line 54, :column 7, :line 54, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/coords->geojson, :variadic false, :file "src/elevations/core.cljs", :end-column 22, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cs])), :test true}, format-date {:meta {:end-column 17, :end-line 43, :column 6, :line 43, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :file "src/elevations/core.cljs", :line 43, :column 1, :end-line 43, :end-column 17, :test true, :name elevations.core/format-date}, extents {:meta {:end-column 13, :end-line 99, :column 6, :line 99, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :file "src/elevations/core.cljs", :line 99, :column 1, :end-line 99, :end-column 13, :test true, :name elevations.core/extents}, seconds {:protocol-inline nil, :meta {:arglists (quote ([t])), :end-column 14, :end-line 51, :column 7, :line 51, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/seconds, :variadic false, :file "src/elevations/core.cljs", :end-column 14, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :test true}, ui-main {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 14, :end-line 181, :column 7, :line 181, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/ui-main, :variadic false, :file "src/elevations/core.cljs", :end-column 14, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, gpx->tracks {:protocol-inline nil, :meta {:arglists (quote ([doc])), :end-column 18, :end-line 61, :column 7, :line 61, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/gpx->tracks, :variadic false, :file "src/elevations/core.cljs", :end-column 18, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :test true}, ui-map {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 13, :end-line 203, :column 7, :line 203, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/ui-map, :variadic false, :file "src/elevations/core.cljs", :end-column 13, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, ui-elevations {:protocol-inline nil, :meta {:arglists (quote ([{:keys [selected scrub]} actions])), :end-column 20, :end-line 105, :column 7, :line 105, :file "/Users/exupero/code/elevations/src/elevations/core.cljs"}, :name elevations.core/ui-elevations, :variadic false, :file "src/elevations/core.cljs", :end-column 20, :method-params ([p__84782 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [selected scrub]} actions])), :test true}}, :require-macros {cljs.core.match cljs.core.match, elevations.macros elevations.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:drop-on :drop-off :load :type :features :geometry :coordinates :lon :lat :elevation :time :id :started :duration :points :hide-path :show-path :scrub :selected :svg :defs :marker :viewBox :refX :refY :markerWidth :markerHeight :orient :path :d :stroke-width :g :class :transform :line :x1 :x2 :text :dx :dy :circle :cx :r :marker-end :y1 :y2 :rect :x :y :width :height :onmousemove :point :tracks :droppable? :div :ul :className :li :onclick :select :section :main :show? :geojson :map-pane :style :cy :fill :else :set-map-pane :no-op :recur], :seen #{:y :load :started :path :features :r :coordinates :elevation :transform :selected :dx :ul :refY :else :set-map-pane :marker :li :fill :section :drop-on :time :markerWidth :geojson :circle :markerHeight :y1 :tracks :width :onclick :dy :hide-path :recur :type :duration :points :orient :geometry :scrub :className :show? :no-op :map-pane :style :div :g :show-path :line :stroke-width :cx :id :class :cy :lon :defs :svg :lat :d :point :drop-off :x :x1 :onmousemove :y2 :viewBox :main :rect :refX :x2 :height :marker-end :select :text :droppable?}}, :doc nil}