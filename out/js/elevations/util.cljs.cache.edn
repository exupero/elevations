;; Analyzed by ClojureScript 0.0-3195
{:use-macros nil, :excludes #{}, :name elevations.util, :imports nil, :requires {goog.dom.xml goog.dom.xml, xml goog.dom.xml}, :uses nil, :defs {extrema {:protocol-inline nil, :meta {:arglists (quote ([f xs])), :end-column 14, :end-line 50, :column 7, :line 50, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/extrema, :variadic false, :file "src/elevations/util.cljs", :end-column 14, :method-params ([f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f xs])), :test true}, extents {:meta {:end-column 13, :end-line 48, :column 6, :line 48, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :file "src/elevations/util.cljs", :line 48, :column 1, :end-line 48, :end-column 13, :test true, :name elevations.util/extents}, zoom {:protocol-inline nil, :meta {:arglists (quote ([map-pane feature])), :end-column 11, :end-line 45, :column 7, :line 45, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/zoom, :variadic false, :file "src/elevations/util.cljs", :end-column 11, :method-params ([map-pane feature]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-pane feature])), :test true}, classes {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(cs)], :arglists [[& cs]], :arglists-meta (nil)}, :arglists (quote ([& cs])), :end-column 14, :end-line 42, :column 7, :line 42, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/classes, :variadic true, :file "src/elevations/util.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(cs)], :arglists [[& cs]], :arglists-meta (nil)}, :method-params [(cs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists [[& cs]], :test true}, gpx->tracks {:protocol-inline nil, :meta {:arglists (quote ([doc])), :end-column 18, :end-line 22, :column 7, :line 22, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/gpx->tracks, :variadic false, :file "src/elevations/util.cljs", :end-column 18, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :test true}, coords->geojson {:protocol-inline nil, :meta {:arglists (quote ([cs])), :end-column 22, :end-line 15, :column 7, :line 15, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/coords->geojson, :variadic false, :file "src/elevations/util.cljs", :end-column 22, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cs])), :test true}, seconds {:protocol-inline nil, :meta {:arglists (quote ([t])), :end-column 14, :end-line 12, :column 7, :line 12, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/seconds, :variadic false, :file "src/elevations/util.cljs", :end-column 14, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :test true}, format-duration {:protocol-inline nil, :meta {:arglists (quote ([t])), :end-column 22, :end-line 6, :column 7, :line 6, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :name elevations.util/format-duration, :variadic false, :file "src/elevations/util.cljs", :end-column 22, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :test true}, format-date {:meta {:end-column 17, :end-line 4, :column 6, :line 4, :file "/Users/exupero/code/elevations/src/elevations/util.cljs"}, :file "src/elevations/util.cljs", :line 4, :column 1, :end-line 4, :end-column 17, :test true, :name elevations.util/format-date}}, :require-macros nil, :cljs.analyzer/constants {:order [:type :features :geometry :coordinates :lon :lat :elevation :time :id :started :duration :points], :seen #{:started :features :coordinates :elevation :time :type :duration :points :geometry :id :lon :lat}}, :doc nil}