;; Analyzed by ClojureScript 0.0-3195
{:use-macros nil, :excludes #{}, :name elevations.view, :imports nil, :requires {util elevations.util, elevations.util elevations.util, vdom.elm vdom.elm, cljs.core.async cljs.core.async, async cljs.core.async}, :uses {event vdom.elm, put! cljs.core.async}, :defs {map-window {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 17, :end-line 104, :column 7, :line 104, :file "/Users/exupero/code/elevations/src/elevations/view.cljs"}, :name elevations.view/map-window, :variadic false, :file "src/elevations/view.cljs", :end-column 17, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, main {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 11, :end-line 82, :column 7, :line 82, :file "/Users/exupero/code/elevations/src/elevations/view.cljs"}, :name elevations.view/main, :variadic false, :file "src/elevations/view.cljs", :end-column 11, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, elevations {:protocol-inline nil, :meta {:arglists (quote ([{:keys [selected scrub]} actions])), :end-column 17, :end-line 6, :column 7, :line 6, :file "/Users/exupero/code/elevations/src/elevations/view.cljs"}, :name elevations.view/elevations, :variadic false, :file "src/elevations/view.cljs", :end-column 17, :method-params ([p__87425 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [selected scrub]} actions])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:scrub :selected :svg :id :defs :marker :viewBox :refX :refY :markerWidth :markerHeight :orient :path :d :stroke-width :points :elevation :time :g :class :transform :line :x1 :x2 :started :text :dx :dy :circle :cx :r :marker-end :y1 :y2 :rect :x :y :width :height :onmousemove :point :tracks :droppable? :div :ul :className :li :onclick :select :duration :section :main :lon :lat :show? :geojson :map-pane :style :cy :fill], :seen #{:y :started :path :r :elevation :transform :selected :dx :ul :refY :marker :li :fill :section :time :markerWidth :geojson :circle :markerHeight :y1 :tracks :width :onclick :dy :duration :points :orient :scrub :className :show? :map-pane :style :div :g :line :stroke-width :cx :id :class :cy :lon :defs :svg :lat :d :point :x :x1 :onmousemove :y2 :viewBox :main :rect :refX :x2 :height :marker-end :select :text :droppable?}}, :doc nil}